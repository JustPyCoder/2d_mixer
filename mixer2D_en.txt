Start working with mixeer2D. Initialization and screen display in the command line.
	
	First, we need to create an object, for example, main_screen.
	Then we assign the Ecran class to the object and pass a list with the screen dimensions, for example, [16, 9] (values start from 1) (values can be changed according to your 	needs, but here we will use these values) in characters, for example, '..'.
	We've only passed the parameters; now we need to create the screen itself using the plase_screen() method.
	The screen is created in memory; to see it, we use the print_screen() method. Example code below.

	----------

	from mixer2D import*
	
	main_screen = Screen([16, 9],'..')
	main_screen.place_screen()
	
	main_screen.print_screen()

	----------

	................................
	................................
	................................
	................................
	................................
	................................
	................................
	................................
	................................

	----------
	
Drawing characters on the screen according to coordinates.
	
	Suppose we have a square list of coordinates in the variable cords. To display it, we need to use the place_sign() function.
	We pass coordinates and a symbol to it place_sign(cords, '##'). Here counting starts from zero.
	
	----------
	
	from mixer2D import*
	
	cords = [[5,1],[4,6],[9,8],[1,5],[0,0],[15,8]]
	
	main_screen = Screen([16, 9],'..')
	main_screen.place_screen()
	
	main_screen.place_sign(cords, '##')
	
	main_screen.print_screen()

	----------
	
	##..............................
	..........##....................
	................................
	................................
	................................
	..##............................
	........##......................
	................................
	..................##..........##

	----------
	
	But specifying coordinates for some huge figure is not very convenient. Therefore, to define large figures, we use the Figure.rectangle() function, which returns coordinate values for filling a rectangle.
	You need to pass lists of coordinates for the top-left and bottom-right corners to cover the entire space between them.
	Counting starts from 0. Also, the starting value should be less than the end value start_pos[0] > end_pos[0] and start_pos[1] > end_pos[1].
	This code will draw a line down the center.
	
	----------
	
	from mixer2D import*
	
	main_screen = Screen([16, 9],'..')
	main_screen.place_screen()
	
	cords_ground = Figure.rectangle([0,3], [15,5])
	
	print(cords_ground)
	
	main_screen.place_sign(cords_ground, '##')
	
	main_screen.print_screen()

	----------

	................................
	................................
	................................
	################################
	################################
	################################
	................................
	................................
	................................

	----------

Shifting the entire screen
	
	We create an object, then assign the Logics class to it and pass a list of coordinates for shifting as well as the dimensions of our display. Then when using the 	logical_right() method,
	our coordinates will shift by 1 to the right. This method returns them.
	Example of using Logics()

	----------

	import os
	import time
	from mixer2D import*
	
	cords = [[0,5],[1,5],[2,5],[3,5],[2,4],[2,6]]
	
	main_screen = Ecran([16, 9],'..')
	main_screen.plaran()
	
	left = Logics(cords, [16,9])
	
	while True:
		os.system('cls') 
		main_screen.plase_ecran()
		main_screen.plase_sign(cords, '**')
		main_screen.print_ecran()
		time.sleep(0.2)
		cords = left.logical_right()
